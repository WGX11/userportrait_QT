{"remainingRequest":"D:\\Project\\userportrait_QT\\user-portrait-for-qt-master\\frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\Project\\userportrait_QT\\user-portrait-for-qt-master\\frontend\\src\\utils\\request.js","dependencies":[{"path":"D:\\Project\\userportrait_QT\\user-portrait-for-qt-master\\frontend\\src\\utils\\request.js","mtime":1699352770642},{"path":"D:\\Project\\userportrait_QT\\user-portrait-for-qt-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1699426402170},{"path":"D:\\Project\\userportrait_QT\\user-portrait-for-qt-master\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1699426403263}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHJvdXRlciBmcm9tICJAL3JvdXRlciI7CnZhciByZXF1ZXN0ID0gYXhpb3MuY3JlYXRlKHsKICBiYXNlVVJMOiAiLyIsCiAgdGltZW91dDogNTAwMAp9KTsgLy8g6K+35rGC55m95ZCN5Y2V77yM5aaC5p6c6K+35rGC5Zyo55m95ZCN5Y2V6YeM6Z2i77yM5bCG5LiN5Lya6KKr5oum5oiq5qCh6aqM5p2D6ZmQCgp2YXIgd2hpdGVVcmxzID0gWyIvbG9naW4iLCAnL3JlZ2lzdGVyJywgIi9hcHBsaXN0Il07IC8vIOS4iuS8oOaWh+S7tnVybAoKdmFyIHVwbG9hZFVybHMgPSBbIi9hcGkvdXNlci91cGxvYWQvIl07IC8vIOS4i+i9veaWh+S7tnVybAoKdmFyIGRvd25sb2FkVXJscyA9IFsiL2FwaS9zZXFfbWluaW5nX3Jlc3VsdC8iXTsgLy8gcmVxdWVzdCDmi6bmiKrlmagKLy8g5Y+v5Lul6Ieq6K+35rGC5Y+R6YCB5YmN5a+56K+35rGC5YGa5LiA5Lqb5aSE55CGCi8vIOavlOWmgue7n+S4gOWKoHRva2Vu77yM5a+56K+35rGC5Y+C5pWw57uf5LiA5Yqg5a+GCgpyZXF1ZXN0LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7CiAgY29uZmlnLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCc7CiAgdXBsb2FkVXJscy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGluZGV4KSB7CiAgICBpZiAoY29uZmlnLnVybC5pbmNsdWRlcyh2YWwpKSB7CiAgICAgIGNvbmZpZy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJzsKICAgIH0KICB9KTsKICBkb3dubG9hZFVybHMuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBpbmRleCkgewogICAgaWYgKGNvbmZpZy51cmwuaW5jbHVkZXModmFsKSkgewogICAgICBjb25zb2xlLmxvZygi5LiL6L29Iik7CiAgICAgIGNvbmZpZy5yZXNwb25zZVR5cGUgPSAnYmxvYic7CiAgICAgIGNvbmZpZy5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LWRvd25sb2FkO2NoYXJzZXQ9dXRmLTgnOwogICAgICBjb25maWcuaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddID0gJ2F0dGFjaG1lbnQ7ZmlsZW5hbWU9Kic7CiAgICB9CiAgfSk7CgogIGlmICghd2hpdGVVcmxzLmluY2x1ZGVzKGNvbmZpZy51cmwpKSB7CiAgICAvLyDmoKHpqozor7fmsYLnmb3lkI3ljZUKICAgIHZhciB0b2tlbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oInRva2VuIik7CiAgICBjb25zb2xlLmxvZygidG9rZW49IiwgdG9rZW4pOwoKICAgIGlmIChpc0VtcHR5U3RyKHRva2VuKSkgewogICAgICByb3V0ZXIucHVzaCgiL2xvZ2luIik7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZygi5YqgdG9rZW7lpLQ6IiArIHRva2VuKTsKICAgICAgY29uZmlnLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9ICJCZWFyZXIgIiArIHRva2VuOyAvLyDorr7nva7or7fmsYLlpLQg77yM5bCG55So5oi355qEdG9rZW7kv53lrZjlnKjor7fmsYLlpLTkuK0KICAgIH0KICB9CgogIHJldHVybiBjb25maWc7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7Cn0pOyAvLyByZXNwb25zZSDmi6bmiKrlmagKLy8g5Y+v5Lul5Zyo5o6l5Y+j5ZON5bqU5ZCO57uf5LiA5aSE55CG57uT5p6cCgpyZXF1ZXN0LmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgdmFyIHJlcyA9IHJlc3BvbnNlLmRhdGE7IC8vIOWmguaenOaYr+i/lOWbnueahOaWh+S7tgoKICBpZiAocmVzcG9uc2UuY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ2Jsb2InKSB7CiAgICByZXR1cm4gcmVzOwogIH0gLy8g5YW85a655pyN5Yqh56uv6L+U5Zue55qE5a2X56ym5Liy5pWw5o2uCgoKICBpZiAodHlwZW9mIHJlcyA9PT0gJ3N0cmluZycpIHsKICAgIHJlcyA9IHJlcyA/IEpTT04ucGFyc2UocmVzKSA6IHJlczsKICB9IC8vIOmqjOivgXRva2VuCgoKICBpZiAocmVzLnN0YXR1c19jb2RlID09PSA0MDEpIHsKICAgIGNvbnNvbGUuZXJyb3IoInRva2Vu6L+H5pyf77yM6YeN5paw55m75b2VIik7CiAgICByb3V0ZXIucHVzaCgiL2xvZ2luIik7CiAgfQoKICByZXR1cm4gcmVzOwp9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICBjb25zb2xlLmxvZygnZXJyJyArIGVycm9yKTsgLy8gZm9yIGRlYnVnCgogIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7Cn0pOwoKZnVuY3Rpb24gaXNFbXB0eVN0cihzKSB7CiAgcmV0dXJuIHMgPT09IHVuZGVmaW5lZCB8fCBzID09PSBudWxsIHx8IHMgPT09ICcnOwp9CgpleHBvcnQgZGVmYXVsdCByZXF1ZXN0Ow=="},{"version":3,"sources":["D:/Project/userportrait_QT/user-portrait-for-qt-master/frontend/src/utils/request.js"],"names":["axios","router","request","create","baseURL","timeout","whiteUrls","uploadUrls","downloadUrls","interceptors","use","config","headers","forEach","val","index","url","includes","console","log","responseType","token","sessionStorage","getItem","isEmptyStr","push","error","Promise","reject","response","res","data","JSON","parse","status_code","s","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,GADgB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;;AACA,IAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,WAAX,EAAwB,UAAxB,CAAlB,C,CACA;;AACA,IAAMC,UAAU,GAAG,CAAC,mBAAD,CAAnB,C,CACA;;AACA,IAAMC,YAAY,GAAG,CAAC,yBAAD,CAArB,C,CAEA;AACA;AACA;;AACAN,OAAO,CAACO,YAAR,CAAqBP,OAArB,CAA6BQ,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACvCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC;AACAL,EAAAA,UAAU,CAACM,OAAX,CAAmB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC/B,QAAIJ,MAAM,CAACK,GAAP,CAAWC,QAAX,CAAoBH,GAApB,CAAJ,EAA8B;AAC1BH,MAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,qBAAjC;AACH;AACJ,GAJD;AAKAJ,EAAAA,YAAY,CAACK,OAAb,CAAqB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACjC,QAAIJ,MAAM,CAACK,GAAP,CAAWC,QAAX,CAAoBH,GAApB,CAAJ,EAA8B;AAC1BI,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAR,MAAAA,MAAM,CAACS,YAAP,GAAsB,MAAtB;AACAT,MAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,sCAAjC;AACAD,MAAAA,MAAM,CAACC,OAAP,CAAe,qBAAf,IAAwC,uBAAxC;AACH;AACJ,GAPD;;AASA,MAAI,CAACN,SAAS,CAACW,QAAV,CAAmBN,MAAM,CAACK,GAA1B,CAAL,EAAqC;AAAE;AACnC,QAAIK,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAZ;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBE,KAAtB;;AACA,QAAIG,UAAU,CAACH,KAAD,CAAd,EAAuB;AACnBpB,MAAAA,MAAM,CAACwB,IAAP,CAAY,QAAZ;AACH,KAFD,MAEO;AACHP,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaE,KAAzB;AACAV,MAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkC,YAAYS,KAA9C,CAFG,CAEmD;AACzD;AACJ;;AACD,SAAOV,MAAP;AACH,CA3BD,EA2BG,UAAAe,KAAK,EAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CA7BD,E,CA+BA;AACA;;AACAxB,OAAO,CAACO,YAAR,CAAqBoB,QAArB,CAA8BnB,GAA9B,CACI,UAAAmB,QAAQ,EAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAAClB,MAAT,CAAgBS,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOU,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGE,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;;;AACA,MAAIA,GAAG,CAACI,WAAJ,KAAoB,GAAxB,EAA6B;AACzBhB,IAAAA,OAAO,CAACQ,KAAR,CAAc,cAAd;AACAzB,IAAAA,MAAM,CAACwB,IAAP,CAAY,QAAZ;AACH;;AACD,SAAOK,GAAP;AACH,CAjBL,EAkBI,UAAAJ,KAAK,EAAI;AACLR,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQO,KAApB,EADK,CACsB;;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CArBL;;AAuBA,SAASF,UAAT,CAAoBW,CAApB,EAAuB;AACnB,SAAOA,CAAC,KAAKC,SAAN,IAAmBD,CAAC,KAAK,IAAzB,IAAiCA,CAAC,KAAK,EAA9C;AACH;;AAED,eAAejC,OAAf","sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\n\r\nconst request = axios.create({\r\n    baseURL: \"/\",\r\n    timeout: 5000\r\n})\r\n\r\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\r\nconst whiteUrls = [\"/login\", '/register', \"/applist\"]\r\n// 上传文件url\r\nconst uploadUrls = [\"/api/user/upload/\"]\r\n// 下载文件url\r\nconst downloadUrls = [\"/api/seq_mining_result/\"]\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8'\r\n    uploadUrls.forEach((val, index) => {\r\n        if (config.url.includes(val)) {\r\n            config.headers['Content-Type'] = 'multipart/form-data'\r\n        }\r\n    })\r\n    downloadUrls.forEach((val, index) => {\r\n        if (config.url.includes(val)) {\r\n            console.log(\"下载\")\r\n            config.responseType = 'blob'\r\n            config.headers['content-type'] = 'application/x-download;charset=utf-8'\r\n            config.headers['content-disposition'] = 'attachment;filename=*'\r\n        }\r\n    })\r\n    \r\n    if (!whiteUrls.includes(config.url)) { // 校验请求白名单\r\n        let token = sessionStorage.getItem(\"token\")\r\n        console.log(\"token=\", token)\r\n        if (isEmptyStr(token)) {\r\n            router.push(\"/login\")\r\n        } else {\r\n            console.log(\"加token头:\" + token)\r\n            config.headers['Authorization'] = \"Bearer \" + token;  // 设置请求头 ，将用户的token保存在请求头中\r\n        }\r\n    }\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        // 验证token\r\n        if (res.status_code === 401) {\r\n            console.error(\"token过期，重新登录\")\r\n            router.push(\"/login\")\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\nfunction isEmptyStr(s) {\r\n    return s === undefined || s === null || s === '';\r\n}\r\n\r\nexport default request\r\n\r\n"]}]}